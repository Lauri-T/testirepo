/*
* Utility
* ======================
*/

@mixin transition($args) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	transition: $args;
}

@mixin box-sizing($args) {
	-webkit-box-sizing: $args;
	-moz-box-sizing: $args;
	-ms-box-sizing: $args;
	box-sizing: $args;
}

@mixin box-shadow($args) {
	-webkit-box-shadow: $args;
	-moz-box-shadow: $args;
	-ms-box-shadow: $args;
	box-shadow: $args;
}

@mixin translate($x: 0, $y: 0) {
	-webkit-transform : translate($x, $y);
	   -moz-transform : translate($x, $y);
	    -ms-transform : translate($x, $y);
	     -o-transform : translate($x, $y);
	        transform : translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	-webkit-transform : translate($x, $y, $z);
	   -moz-transform : translate($x, $y, $z);
	    -ms-transform : translate($x, $y, $z);
	     -o-transform : translate($x, $y, $z);
	        transform : translate($x, $y, $z);
}

@mixin input-placeholder {
	&::-webkit-input-placeholder { /* WebKit browsers */
		@content;
	}
	&:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
		@content;
	}
	&::-moz-placeholder { /* Mozilla Firefox 19+ */
		@content;
	}
	&:-ms-input-placeholder { /* Internet Explorer 10+ */
		@content;
	}
}

@mixin disable-select {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin hidpi {
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (-moz-min-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		.backgroundsize & {
			@content;
		}
	}
}

// From: http://jakearchibald.github.io/sass-ie/
$fix-mqs: false !default;
@mixin respond-min($width) {
	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs >= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $width) {
			@content;
		}
	}
}

@mixin respond-max($width) {
	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs <= $width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (max-width: $width) {
			@content;
		}
	}
}

@mixin respond-min-max($min-width, $max-width) {
	// If we're outputting for a fixed media query set...
	@if $fix-mqs {
		// ...and if we should apply these rules...
		@if $fix-mqs <= $max-width and fix-mqs >= $min-width {
			// ...output the content the user gave us.
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $min-width) and (max-width: $max-width) {
			@content;
		}
	}
}

@function img-url($partial-path) {
	@return url(#{$img-url}#{$partial-path});
}

